pipeline {
  agent any
  stages {
    stage('Git CLoning') {
      steps {
        git(url: 'https://github.com/yaseensec/Jenkinsfiles.git', branch: 'master')
      }
    }

    stage('Build') {
      parallel {
        stage('Build') {
          steps {
            sh 'ls /tmp'
            sh 'ls -al /tmp'
          }
        }

        stage('Test Step') {
          steps {
            sleep 10
            sh 'ls -al /tmp'
          }
        }

      }
    }

    stage('Test') {
      parallel {
        stage('Test') {
          steps {
            sh 'ls /usr/bin'
          }
        }

        stage('Test1') {
          steps {
            sh 'ls -al /var/lib'
          }
        }

      }
    }

    stage('docker rmi') {
      steps {
        sh '''docker images
'''
        sh 'docker rmi $(docker images --format \'{{.Repository}}:{{.Tag}}\' | grep \'014357505841.dkr.ecr.ap-south-1.amazonaws.com/erp\')'
      }
    }

  }
}

pipeline {
    agent any

    stages {
        stage('Get Parameters') {
            steps {
                script {
                    def paramMap = [:]  // Initialize an empty map

                    // Loop through all available parameters
                    params.each { paramName, paramValue ->
                        if (paramValue) {
                            paramMap[paramName] = paramValue
                        }
                    }

                    // Print the parameter map for verification
                    echo "Parameter Map: ${paramMap}"

                    // Pass paramMap to the next stage
                    build job: 'NextJob', parameters: [string(name: 'paramMap', value: paramMap.inspect())]
                }
            }
        }
    }
}


pipeline {
    agent any

    stages {
        stage('Next Stage') {
            steps {
                script {
                    def paramMap = evaluate("return ${params.paramMap}")

                    // Loop through paramMap and access parameter names and values
                    paramMap.each { paramName, paramValue ->
                        echo "Parameter Name: ${paramName}"
                        echo "Parameter Value: ${paramValue}"
                        
                        // Perform actions based on parameter name and value
                        // Example: if (paramName == 'global') { /* do something */ }
                    }
                }
            }
        }
    }
}



pipeline {
    agent any

    stages {
        stage('Run Ansible Playbook for Filled Parameters') {
            steps {
                script {
                    def paramMap = [:]  // Initialize an empty map

                    // Loop through all available parameters
                    params.each { paramName, paramValue ->
                        if (paramValue) {
                            paramMap[paramName] = paramValue
                        }
                    }

                    // Print the parameter map for verification
                    echo "Parameter Map: ${paramMap}"

                    // Loop through paramMap and run Ansible playbook for each filled parameter
                    paramMap.each { paramName, paramValue ->
                        // Run Ansible playbook with parameterName and parameterValue as variables
                        sh """
                            ansible-playbook your_playbook.yml \
                            -e "paramName=${paramName}" \
                            -e "paramValue=${paramValue}"
                        """
                    }
                }
            }
        }
    }
}

pipeline {
    agent any

    stages {
        stage('Run Ansible Playbook for Filled String Parameters') {
            steps {
                script {
                    def paramMap = [:]  // Initialize an empty map

                    // Filter and process only string parameters
                    def stringParams = params.findAll { paramName, paramValue ->
                        paramValue instanceof String
                    }

                    // Loop through the filtered string parameters
                    stringParams.each { paramName, paramValue ->
                        paramMap[paramName] = paramValue
                    }

                    // Print the parameter map for verification
                    echo "Parameter Map: ${paramMap}"

                    // Loop through paramMap and run Ansible playbook for each filled string parameter
                    paramMap.each { paramName, paramValue ->
                        // Run Ansible playbook with parameterName and parameterValue as variables
                        sh """
                            ansible-playbook your_playbook.yml \
                            -e "paramName=${paramName}" \
                            -e "paramValue=${paramValue}"
                        """
                    }
                }
            }
        }
    }
}


pipeline {
    agent any

    stages {
        stage('Run Ansible Playbooks') {
            steps {
                script {
                    def paramMap = [:]  // Initialize an empty map
                    def webAppVersion

                    // Loop through all available parameters
                    params.each { paramName, paramValue ->
                        if (paramValue instanceof String && paramValue != '') {
                            paramMap[paramName] = paramValue
                            if (paramName == 'webapp') {
                                webAppVersion = paramValue
                            }
                        }
                    }

                    // Print the parameter map for verification
                    echo "Parameter Map: ${paramMap}"

                    if ('webapp' in paramMap) {
                        // Run the webapp playbook with paramName and paramValue as environment variables
                        sh """
                            ansible-playbook webapp_playbook.yml \
                            -e "paramName=webapp" \
                            -e "paramValue=${paramValue}" \
                            -e "webapp_version=${paramValue}"
                        """
                    } else if (paramMap) {
                        // Run the default playbook for other parameters
                        sh "ansible-playbook default_playbook.yml"
                    }
                }
            }
        }
    }
}




pipeline {
    agent any

    stages {
        stage('Run Ansible Playbooks') {
            steps {
                script {
                    def paramMap = [:]  // Initialize an empty map
                    def webAppVersion

                    // Loop through all available parameters
                    params.each { paramName, paramValue ->
                        if (paramValue instanceof String && paramValue != '') {
                            paramMap[paramName] = paramValue
                            if (paramName == 'webapp') {
                                webAppVersion = paramValue
                            }
                        }
                    }

                    // Print the parameter map for verification
                    echo "Parameter Map: ${paramMap}"

                    if ('webapp' in paramMap) {
                        // Run the webapp playbook with paramName and paramValue as environment variables
                        sh """
                            ansible-playbook webapp_playbook.yml \
                            -e "paramName=${paramName}" \
                            -e "paramValue=${paramValue}" \
                            -e "webapp_version=${webAppVersion}"
                        """
                    } else if (paramMap) {
                        // Run the default playbook for other parameters
                        sh "ansible-playbook default_playbook.yml"
                    }
                }
            }
        }
    }
}



pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Git checkout step
                // ...
            }
        }

        stage('Add SonarQube and Jacoco Plugins') {
            steps {
                script {
                    // Read the pom.xml file
                    def pomXml = readFile('path/to/your/pom.xml')

                    // Define the plugin blocks to add
                    def sonarPluginBlock = '''
                        <plugin>
                            <groupId>org.sonarsource.scanner.maven</groupId>
                            <artifactId>sonar-maven-plugin</artifactId>
                            <version>3.8.0.2131</version>
                        </plugin>
                    '''

                    def jacocoPluginBlock = '''
                        <plugin>
                            <groupId>org.jacoco</groupId>
                            <artifactId>jacoco-maven-plugin</artifactId>
                            <version>0.8.7</version>
                        </plugin>
                    '''

                    // Use awk to insert the plugin blocks into the pom.xml
                    def modifiedPomXml = pomXml.replaceAll('<\/build>', sonarPluginBlock + '\n<\/build>')
                    modifiedPomXml = modifiedPomXml.replaceAll('<\/project>', jacocoPluginBlock + '\n<\/project>')

                    // Write the modified pom.xml back to the workspace
                    writeFile(file: 'path/to/your/pom.xml', text: modifiedPomXml)
                }
            }
        }

        stage('Build and SonarQube Scan') {
            steps {
                // Maven build step
                sh 'mvn clean install'

                // Execute SonarQube scan
                sh 'mvn sonar:sonar'
            }
        }
    }

    // ...
}